{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { of } from \"rxjs\";\nimport { catchError, map, tap } from \"rxjs/operators\";\nimport { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  get user() {\n    return {\n      ...this.user\n    };\n  }\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = environment.baseURL;\n  }\n  register(body) {\n    const url = `${this.baseUrl}/accounts/register`;\n    return this.http.post(url, body);\n  }\n  login(email, password) {\n    const url = `${this.baseUrl}/accounts/authenticate`;\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(tap(resp => {\n      if (resp.id > \"0\") {\n        sessionStorage.setItem(\"token\", resp.jwtToken);\n      }\n    }), map(resp => resp.id), catchError(err => of(err.message)));\n  }\n  validarToken() {\n    const url = `${this.baseUrl}/accounts/refresh-token`;\n    const headers = new HttpHeaders({\n      \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")}`\n    });\n    return this.http.get(url, {\n      headers\n    }).pipe(map(resp => {\n      sessionStorage.setItem(\"token\", resp.jwtToken);\n      this._user = {\n        id: resp.id,\n        title: resp.title,\n        firstName: resp.firstName,\n        lastName: resp.lastName,\n        email: resp.email,\n        linkCV: resp.linkCV,\n        englishLevel: resp.englishLevel,\n        role: resp.role,\n        jwtToken: resp.jwtToken\n      };\n      return true;\n    }), catchError(() => of(false)));\n  }\n  logout() {\n    sessionStorage.clear();\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,EAAE,QAAoB,MAAM;AACrC,SAASC,UAAU,EAAEC,GAAG,EAAEC,GAAG,QAAQ,gBAAgB;AAErD,SAASC,WAAW,QAAQ,mCAAmC;;;AAM/D,OAAM,MAAOC,WAAW;EAKtB,IAAIC,IAAI;IACN,OAAO;MAAC,GAAG,IAAI,CAACA;IAAI,CAAC;EACvB;EAEAC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAPhB,YAAO,GAAWJ,WAAW,CAACK,OAAO;EAOL;EAExCC,QAAQ,CAACC,IAAmB;IAC1B,MAAMC,GAAG,GAAW,GAAG,IAAI,CAACC,OAAO,oBAAoB;IAEvD,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAwBF,GAAG,EAAED,IAAI,CAAC;EAEzD;EAEAI,KAAK,CAACC,KAAa,EAAEC,QAAgB;IACnC,MAAML,GAAG,GAAW,GAAG,IAAI,CAACC,OAAO,wBAAwB;IAE3D,MAAMF,IAAI,GAAc;MACtBK,KAAK;MACLC;KACD;IAED,OAAO,IAAI,CAACT,IAAI,CAACM,IAAI,CAAgBF,GAAG,EAAED,IAAI,CAAC,CAC5CO,IAAI,CACHf,GAAG,CAACgB,IAAI,IAAG;MACT,IAAIA,IAAI,CAACC,EAAE,GAAG,GAAG,EAAE;QACjBC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,QAAS,CAAC;;IAEnD,CAAC,CAAC,EACFrB,GAAG,CAACiB,IAAI,IAAIA,IAAI,CAACC,EAAE,CAAC,EACpBnB,UAAU,CAACuB,GAAG,IAAIxB,EAAE,CAACwB,GAAG,CAACC,OAAO,CAAC,CAAC,CACnC;EACL;EAEAC,YAAY;IAEV,MAAMd,GAAG,GAAW,GAAG,IAAI,CAACC,OAAO,yBAAyB;IAE5D,MAAMc,OAAO,GAAgB,IAAI5B,WAAW,CAAC;MAC3C,eAAe,EAAE,UAAUsB,cAAc,CAACO,OAAO,CAAC,OAAO,CAAC;KAC3D,CAAC;IAEF,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAgBjB,GAAG,EAAE;MAAEe;IAAO,CAAE,CAAC,CAClDT,IAAI,CACHhB,GAAG,CAACiB,IAAI,IAAG;MAETE,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,QAAQ,CAAC;MAE9C,IAAI,CAACO,KAAK,GAAG;QACXV,EAAE,EAAED,IAAI,CAACC,EAAG;QACZW,KAAK,EAAEZ,IAAI,CAACY,KAAK;QACjBC,SAAS,EAAEb,IAAI,CAACa,SAAS;QACzBC,QAAQ,EAAEd,IAAI,CAACc,QAAQ;QACvBjB,KAAK,EAAEG,IAAI,CAACH,KAAM;QAClBkB,MAAM,EAAEf,IAAI,CAACe,MAAM;QACnBC,YAAY,EAAEhB,IAAI,CAACgB,YAAY;QAC/BC,IAAI,EAAEjB,IAAI,CAACiB,IAAI;QACfb,QAAQ,EAAEJ,IAAI,CAACI;OAChB;MAED,OAAO,IAAI;IACb,CAAC,CAAC,EACFtB,UAAU,CAAC,MAAMD,EAAE,CAAC,KAAK,CAAC,CAAC,CAC5B;EACP;EAEEqC,MAAM;IACJhB,cAAc,CAACiB,KAAK,EAAE;EACxB;;AAxEWjC,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAkC,SAAXlC,WAAW;EAAAmC,YAFV;AAAM","names":["HttpHeaders","of","catchError","map","tap","environment","AuthService","user","constructor","http","baseURL","register","body","url","baseUrl","post","login","email","password","pipe","resp","id","sessionStorage","setItem","jwtToken","err","message","validarToken","headers","getItem","get","_user","title","firstName","lastName","linkCV","englishLevel","role","logout","clear","factory","providedIn"],"sourceRoot":"","sources":["E:\\Grupo Mind\\Repos\\Challenge\\FrontEnd\\MindFrontENd\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { of, Observable } from \"rxjs\";\nimport { catchError, map, tap } from \"rxjs/operators\";\n\nimport { environment } from \"../../../environments/environment\";\nimport { IAuthResponse, IAuthUser, IRegisterUser, IRegisterUserResponse } from \"../interfaces/interfaces\";\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class AuthService {\n\n  private baseUrl: string = environment.baseURL;\n  private _user!: IAuthResponse;\n\n  get user(): IAuthUser {\n    return {...this.user};\n  }\n\n  constructor(private http: HttpClient) { }\n\n  register(body: IRegisterUser): Observable<IRegisterUserResponse> {\n    const url: string = `${this.baseUrl}/accounts/register`;\n\n    return this.http.post<IRegisterUserResponse>(url, body);\n\n  }\n\n  login(email: string, password: string): Observable<IAuthResponse> {\n    const url: string = `${this.baseUrl}/accounts/authenticate`;\n\n    const body: IAuthUser = {\n      email,\n      password\n    };\n\n    return this.http.post<IAuthResponse>(url, body)\n      .pipe(\n        tap(resp => {\n          if (resp.id > \"0\") {\n            sessionStorage.setItem(\"token\", resp.jwtToken!);\n          }\n        }),\n        map(resp => resp.id),\n        catchError(err => of(err.message))\n      );\n  }\n\n  validarToken(): Observable<boolean> {\n\n    const url: string = `${this.baseUrl}/accounts/refresh-token`;\n\n    const headers: HttpHeaders = new HttpHeaders({\n      \"Authorization\": `Bearer ${sessionStorage.getItem(\"token\")}`\n    });\n\n    return this.http.get<IAuthResponse>(url, { headers })\n      .pipe(\n        map(resp => {\n\n          sessionStorage.setItem(\"token\", resp.jwtToken);\n\n          this._user = {\n            id: resp.id!,\n            title: resp.title,\n            firstName: resp.firstName,\n            lastName: resp.lastName,\n            email: resp.email!,\n            linkCV: resp.linkCV,\n            englishLevel: resp.englishLevel,\n            role: resp.role,\n            jwtToken: resp.jwtToken\n          };\n\n          return true;\n        }),\n        catchError(() => of(false))\n      );\n}\n\n  logout(): void {\n    sessionStorage.clear();\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}